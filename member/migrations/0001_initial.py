# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-10 18:27
from __future__ import unicode_literals

import audit_log.models.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import member.managers
import member.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_with_session_key', audit_log.models.fields.CreatingSessionKeyField(editable=False, max_length=40, null=True)),
                ('modified_with_session_key', audit_log.models.fields.LastSessionKeyField(editable=False, max_length=40, null=True)),
                ('creation_datetime', models.DateTimeField(auto_now_add=True)),
                ('last_modified_datetime', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False, editable=False)),
                ('email', models.EmailField(error_messages={'blank': 'Email can not be empty.', 'null': 'Email is a required field.', 'unique': 'This Email has already been registered.'}, max_length=254, unique=True, verbose_name='Email Address')),
                ('full_name', models.CharField(error_messages={'blank': 'Full Name can not be empty.', 'max_length': 'Full Name must be less than 30 characters.', 'null': 'Full Name is a required field.'}, max_length=30, verbose_name='Full Name')),
                ('username', models.CharField(error_messages={'blank': 'Username can not be empty.', 'max_length': 'Username must be less than 50 characters.', 'null': 'Username is a required field.', 'unique': 'This Username has already been registered.'}, max_length=50, unique=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to=member.models.generate_img_file, validators=[member.models.validate_avatar], verbose_name='Profile Picture')),
                ('bio', models.TextField(blank=True, null=True)),
                ('start_datetime', models.DateTimeField(default=datetime.datetime.now)),
                ('end_datetime', models.DateTimeField(default=datetime.datetime.now)),
                ('resume', models.FileField(blank=True, null=True, upload_to=member.models.generate_resume_file, verbose_name='Resume')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('created_by', audit_log.models.fields.CreatingUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_member_member_set', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('modified_by', audit_log.models.fields.LastUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modified_member_member_set', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Members',
                'verbose_name': 'Member',
            },
            managers=[
                ('objects', member.managers.UserManager()),
            ],
        ),
    ]
